services:
  db:
    image: postgres:16
    container_name: gpu-reseller-db-1
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=gpureseller
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  minio:
    image: minio/minio:latest
    container_name: gpu-reseller-minio-1
    restart: always
    command: server /data --console-address ":9001"
    ports: ["9000:9000", "9001:9001"]
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://127.0.0.1:9000/minio/health/live || exit 1
      interval: 30s
      timeout: 5s
      retries: 3

  api:
    build:
      context: ./api
    container_name: gpu-reseller-api-1
    restart: always
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/gpureseller
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_started
      migrator:
        condition: service_completed_successfully
    ports: ["8000:8000"]
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; urllib.request.urlopen('http://127.0.0.1:8000/health')"
      interval: 30s
      timeout: 5s
      retries: 3

  agent:
    build:
      context: ./agent
    container_name: gpu-reseller-agent-1
    restart: always
    environment:
      - API_URL=http://api:8000
    depends_on:
      - api
    ports: ["8080:8080"]
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; urllib.request.urlopen('http://127.0.0.1:8080/')"
      interval: 30s
      timeout: 5s
      retries: 3

  web:
    build:
      context: ./web
    container_name: gpu-reseller-web-1
    restart: always
    environment:
      - NEXT_PUBLIC_API_BASE=http://api:8000
    depends_on:
      - api
    ports:
      - "3000:3000"
    healthcheck:
      test:
        - CMD-SHELL
        - >
          node -e "fetch('http://127.0.0.1:3000').then(()=>process.exit(0)).catch(()=>process.exit(1))"
      interval: 30s
      timeout: 5s
      retries: 5

  migrator:
    image: postgres:16
    container_name: gpu-reseller-migrator-1
    restart: "no"
    environment:
      - PGPASSWORD=postgres
    depends_on:
      db:
        condition: service_healthy
    entrypoint: >
      bash -lc "psql -h db -U postgres -d gpureseller -f /migrations/0001_init.sql"
    volumes:
      - ./db/migrations:/migrations
      - ./scripts:/scripts

volumes:
  pgdata:
  minio_data:
